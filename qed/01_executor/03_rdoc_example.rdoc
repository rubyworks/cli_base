= Example

This example mimics the one given in optparse.rb documentation.

    require 'executioner'
    require 'ostruct'

    class ExampleCLI < Executioner

      CODES = %w[iso-2022-jp shift_jis euc-jp utf8 binary]
      CODE_ALIASES = { "jis" => "iso-2022-jp", "sjis" => "shift_jis" }

      attr :options

      def initialize
        super
        reset!
      end

      def reset!
        @options = OpenStruct.new
        @options.library = []
        @options.inplace = false
        @options.encoding = "utf8"
        @options.transfer_type = :auto
        @options.verbose = false
      end

      help "Require the LIBRARY before executing your script"

      def require=(lib)
        options.library << lib
      end
      alias :r= :require=

      help "Edit ARGV files in place (make backup if EXTENSION supplied)"

      def inplace=(ext)
        options.inplace = true
        options.extension = ext
        options.extension.sub!(/\A\.?(?=.)/, ".")  # ensure extension begins with dot.
      end
      alias :i= :inplace=

      help "Delay N seconds before executing"

      # Cast 'delay' argument to a Float.
      def delay=(n)
        options.delay = n.to_float
      end

      help "Begin execution at given time"

      # Cast 'time' argument to a Time object.
      def time=(time)
        options.time = Time.parse(time)
      end
      alias :t= :time=

      help "Specify record separator (default \\0)"

      # Cast to octal integer.
      def irs=(octal)
        options.record_separator = octal.to_i(8)
      end
      alias :F= :irs=

      help "Example 'list' of arguments"

      # List of arguments.
      def list=(args)
        options.list = list.split(',')
      end

      # Keyword completion.  We are specifying a specific set of arguments (CODES
      # and CODE_ALIASES - notice the latter is a Hash), and the user may provide
      # the shortest unambiguous text.
      CODE_LIST = (CODE_ALIASES.keys + CODES)

      help "Select encoding (#{CODE_LIST})"

      def code=(code)
        codes = CODE_LIST.select{ |x| /^#{code}/ =~ x }
        codes = codes.map{ |x| CODE_ALIASES.key?(x) ? CODE_ALIASES[x] : x }.uniq
        raise ArgumentError unless codes.size == 1
        options.encoding = codes.first
      end

      help "Select transfer type (text, binary, auto)"

      # Optional argument with keyword completion.
      def type=(type)
        raise ArgumentError unless %w{text binary auto}.include(type.downcase)
        options.transfer_type = type.downcase
      end

      help "Run verbosely"

      # Boolean switch.
      def verbose!
        options.verbose = true
      end
      def no_verbose1
        options.verbose = false
      end
      alias :v! :verbose!

      help "Show this message"

      # No argument, shows at tail.  This will print an options summary.
      def help!
        puts self
        exit
      end
      alias :h! :help!

      help "Show version"

      # Another typical switch to print the version.
      def version?
        puts Executor::VERSION
        exit
      end

      def main
        # ... main procedure here ...
      end
    end

We will run some scenarios on this example to make sure it works.

   cli = ExampleCLI.new

   cli.execute_command('-r=facets')
   cli.options.library.assert == ['facets']

Make sure time option parses.

   cli.execute_command('--time=2010-10-10')
   cli.options.time.assert == Time.parse('2010-10-10')

Make sure code lookup words and is limted to the selections provided.

   cli.execute_command('--code=ji')
   cli.options.encoding.assert == 'iso-2022-jp'

   expect ArgumentError do
     cli.execute_command('--code=xxx')
   end

Ensure +irs+ is set to an octal number.

   cli.execute_command('-F 32')
   cli.options.record_separator.assert == 032

Ensure extension begins with dot and inplace is set to true.

   cli.execute_command('--inplace txt')
   cli.options.extension.assert == '.txt'
   cli.options.inplace.assert == true

