= Executable

== DESCRIPTION

The Executable mixin is a very quick and and easy
way to make almost any class usable via a command
line interface. It simply uses writer methods as
option setters, and the first command line argument
as the method to call, with the subsequent arguments
passed to the method.


== FEATURES

* Super easy to use, just mixin.
* Public writers become options.
* Public methods become subcommands.


== RESOURCES

* http://rubyworks.github.com/executable
* http://github.com/rubyworks/executable


== RELEASE NOTES

Please see HISTORY file.


== SYNOPSIS

Simply mixin Executable, then call #execute_command.

  class Example
    include Executable

    attr_accessor :quiet

    attr_accessor :size

    def bread(*args)
      ["bread", quiet, size, *args]
    end

    def butter(*args)
      ["butter", quiet, size, *args]
    end
  end

  example = Example.new

  example.execute!("butter yum")
  => ["butter", nil, nil, "yum"]

  example.execute!("bread --quiet --size=big")
  => ["bread", true, "big"]


Notice that Executable requires an equal-sign (<code>=</code>) be used
when specifying values for non-boolean attributes.

To make the command available on the command line, add an executable
to your project passing ARGV to the #execute! method.

  #!usr/bin/env ruby
  require 'example'
  example = Example.new
  example.execute!(ARGV)


== INSTALL

  $ gem install executable


== LEGAL

(Apache 2.0)

Copyright (c) 2009 Thomas Sawyer

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this program except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

